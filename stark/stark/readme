使用stark组件需要完成一下几个步骤：
1. 拷贝stark app到任何系统。
2. 在目标project中注册stark app，如：
    INSTALLED_APPS = [
        ...
        'stark.apps.StarkConfig',
    ]
3. 如果想要使用stark组件，则需要在目标app的根目录中创建 stark.py
4. 配置路由信息
    from stark.service.stark import site
    urlpatterns = [
        ...
        url(r'^stark/', site.urls),
    ]

5. 接下来就可以使用stark组件进行快速增删改查,示例：
    from crm import models
    from stark.service.stark import site, StarkConfig
    from django.utils.safestring import mark_safe
    from django.conf.urls import url
    from django.shortcuts import HttpResponse
    from django.urls import reverse
    from crm.config.class_list import ClassListConfig

    class UserInfoConfig(StarkConfig):

        def display_gender(self, row=None, header=False):
            if header:
                return '性别'
            return row.get_gender_display()

        def display_detail(self,row=None, header=False):
            if header:
                return '查看详细'
            return mark_safe('<a href="%s">%s</a>' %(reverse('stark:crm_userinfo_detail',kwargs={'pk':row.id}),row.name,))

        list_display = [
            display_detail,
            display_gender,
            'phone',
            'email',
            'depart',
            StarkConfig.display_edit,
            StarkConfig.display_del
        ]

        def extra_url(self):
            info = self.model_class._meta.app_label, self.model_class._meta.model_name

            urlpatterns = [
                url(r'^(?P<pk>\d+)/detail/$', self.wrapper(self.detail_view), name='%s_%s_detail' % info),
            ]
            return urlpatterns

        def detail_view(self,request,pk):
            """
            查看详细页面
            :param request:
            :param pk:
            :return:
            """
            return HttpResponse('详细页面...')

        search_list = ['name','depart__title']


    site.register(models.UserInfo, UserInfoConfig)
    site.register(models.UserInfo, UserInfoConfig,prev='pri')
    site.register(models.UserInfo, UserInfoConfig,prev='pub')
6. 组件内部扩展：
    list_display=[] # 数据显示列表，指定显示哪些列
    get_list_display=[] # 自定制显示列
    action_list=[] # 批量操作功能列表
    order_by=[] # 排序规则
    model_form_class=ModelForm_obj # 自定制编辑和添加页面的ModelForm
    search_list=[] # 定义关键字搜索功能，搜索范围的列表，即搜索时包含哪些列
    filter_list=[Option对象] # 组合搜索条件的列表

    def get_add_btn(self, display_type): # 定制是否要添加按钮的方法
    def save(self, form, modify=False) # 自定制 提交保存到数据库的数据
    def get_urls(self) # 自定制 所有的URL
    def extra_url(self) # 扩展URL --userinfo有实例
    def display_xxx(self, row=None, isHeader=False)  # 自定制数据在表格的显示
    def get_queryset(self) # 自定制要显示的数据
    def get_list_display(self) # 自定制数据显示表格默认的的列的内容的方法，去除删除，编辑，或者添加

    def changelist_view(self, request) # 自定制数据表格的显示

    class PriModelForm(forms.ModelForm) # 自定制ModelForm显示的field

    class DistinctNameOption(Option) # # 组合搜索的时候，自定制显示的条件的去重，有一样的，只显示一个

    def multi_init(self, request)  # 定义批量操作功能  （multi_init是一个功能名称，可任意修改）
    multi_init.text = "批量初始化"  # 定义批量操作功能的显示名称


